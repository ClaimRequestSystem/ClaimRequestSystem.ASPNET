// <auto-generated />
using System;
using ClaimRequest.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClaimRequest.API.Migrations
{
    [DbContext(typeof(ClaimRequestDbContext))]
    partial class ClaimRequestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<int>("ClaimerId")
                        .HasColumnType("integer")
                        .HasColumnName("claimer_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FinanceId")
                        .HasColumnType("integer")
                        .HasColumnName("finance_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id");

                    b.HasIndex("ClaimerId");

                    b.HasIndex("FinanceId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StaffId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.ClaimApprover", b =>
                {
                    b.Property<int>("ClaimId")
                        .HasColumnType("integer")
                        .HasColumnName("claim_id");

                    b.Property<int>("ApproverId")
                        .HasColumnType("integer")
                        .HasColumnName("approver_id");

                    b.HasKey("ClaimId", "ApproverId");

                    b.HasIndex("ApproverId");

                    b.ToTable("ClaimApprovers");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Budget")
                        .HasColumnType("bigint")
                        .HasColumnName("budget");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.ProjectStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StaffId");

                    b.ToTable("ProjectStaffs");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.Claim", b =>
                {
                    b.HasOne("ClaimRequest.API.Data.Entities.Staff", "Claimer")
                        .WithMany()
                        .HasForeignKey("ClaimerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClaimRequest.API.Data.Entities.Staff", "Finance")
                        .WithMany()
                        .HasForeignKey("FinanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClaimRequest.API.Data.Entities.Project", "Project")
                        .WithMany("Claims")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.API.Data.Entities.Staff", null)
                        .WithMany("Claims")
                        .HasForeignKey("StaffId");

                    b.Navigation("Claimer");

                    b.Navigation("Finance");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.ClaimApprover", b =>
                {
                    b.HasOne("ClaimRequest.API.Data.Entities.Staff", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.API.Data.Entities.Claim", "Claim")
                        .WithMany("ClaimApprovers")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.Project", b =>
                {
                    b.HasOne("ClaimRequest.API.Data.Entities.Staff", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.ProjectStaff", b =>
                {
                    b.HasOne("ClaimRequest.API.Data.Entities.Project", "Project")
                        .WithMany("ProjectStaffs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaimRequest.API.Data.Entities.Staff", "Staff")
                        .WithMany("ProjectStaffs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.Claim", b =>
                {
                    b.Navigation("ClaimApprovers");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.Project", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("ProjectStaffs");
                });

            modelBuilder.Entity("ClaimRequest.API.Data.Entities.Staff", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("ProjectStaffs");
                });
#pragma warning restore 612, 618
        }
    }
}
